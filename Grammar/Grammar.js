/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,19],$V5=[1,17],$V6=[1,23],$V7=[1,18],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,24],$Vc=[5,16,18,19,21,22,27,34,39,43,44,45,49,51,52,53],$Vd=[1,41],$Ve=[1,40],$Vf=[1,33],$Vg=[1,31],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[1,46],$Vn=[1,49],$Vo=[1,54],$Vp=[1,55],$Vq=[1,56],$Vr=[1,57],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,65],$VA=[17,23,29,38,55,57,58,59,60,61,62,63,64,65,66,67,68],$VB=[1,99],$VC=[29,38,55],$VD=[1,105],$VE=[1,101],$VF=[1,102],$VG=[1,103],$VH=[1,104],$VI=[5,16,18,19,21,22,27,34,39,42,43,44,45,49,51,52,53],$VJ=[1,119],$VK=[17,23,29,38,55,57,58,61,62,63,64,65,66,67,68],$VL=[17,23,29,38,55,61,62,63,64,65,66,67,68],$VM=[17,23,29,38,55,65,66,67,68],$VN=[1,123],$VO=[26,28,38,46,55],$VP=[38,55],$VQ=[1,137],$VR=[1,147],$VS=[26,28],$VT=[49,51,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"If":8,"asignacion":9,"While":10,"DoWhile":11,"Switch":12,"Console":13,"funcion":14,"llamadaFuncion":15,"BREAK":16,";":17,"CONTINUE":18,"RETURN":19,"Expr":20,"LET":21,"ID":22,":":23,"tipo":24,"corchetes":25,"=":26,"CONST":27,"[":28,"]":29,"NUMBER":30,"STRING":31,"BOOLEAN":32,"VOID":33,"CONSOLE":34,".":35,"LOG":36,"(":37,")":38,"IF":39,"BloqueInstrucciones":40,"Else":41,"ELSE":42,"WHILE":43,"DO":44,"SWITCH":45,"{":46,"BloqueCase":47,"Default":48,"}":49,"Case":50,"CASE":51,"DEFAULT":52,"FUNCTION":53,"parametros":54,",":55,"parametro":56,"+":57,"-":58,"*":59,"/":60,"<":61,"<=":62,">":63,">=":64,"==":65,"!=":66,"&&":67,"||":68,"!":69,"F":70,"DECIMAL":71,"ENTERO":72,"CADENA":73,"TRUE":74,"FALSE":75,"paramsExp":76,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"BREAK",17:";",18:"CONTINUE",19:"RETURN",21:"LET",22:"ID",23:":",26:"=",27:"CONST",28:"[",29:"]",30:"NUMBER",31:"STRING",32:"BOOLEAN",33:"VOID",34:"CONSOLE",35:".",36:"LOG",37:"(",38:")",39:"IF",42:"ELSE",43:"WHILE",44:"DO",45:"SWITCH",46:"{",49:"}",51:"CASE",52:"DEFAULT",53:"FUNCTION",55:",",57:"+",58:"-",59:"*",60:"/",61:"<",62:"<=",63:">",64:">=",65:"==",66:"!=",67:"&&",68:"||",69:"!",71:"DECIMAL",72:"ENTERO",73:"CADENA",74:"TRUE",75:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,3],[6,2],[7,8],[7,7],[7,5],[7,3],[7,8],[7,7],[7,5],[25,3],[25,2],[24,1],[24,1],[24,1],[24,1],[24,1],[9,4],[13,7],[8,6],[41,2],[41,2],[41,0],[10,5],[11,6],[12,8],[47,2],[47,1],[50,4],[48,3],[48,0],[40,3],[40,2],[14,8],[14,6],[54,3],[54,1],[56,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,1],[70,3],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,3],[70,1],[15,4],[76,3],[76,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 40:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 41: case 50: case 77:

        this.$ = [$$[$0]];
    
break;
case 13:

        this.$ = new Break(_$[$0-1].first_line , _$[$0-1].first_column);
    
break;
case 14:

        this.$ = new Continue(_$[$0-1].first_line , _$[$0-1].first_column);
    
break;
case 15:

        this.$ = new Return($$[$0-1] , _$[$0-2].first_line , _$[$0-2].first_column);
    
break;
case 16:

        this.$ = new Return(null , _$[$0-1].first_line , _$[$0-1].first_column);
    
break;
case 17:
 
        this.$ = new Declaration( $$[$0-6] , $$[$0-1] , true, $$[$0-4], $$[$0-3], _$[$0-7].first_line , _$[$0-7].first_column);
    
break;
case 18:
 
        this.$ = new Declaration( $$[$0-5] , $$[$0-1] , true, $$[$0-3], 0,  _$[$0-6].first_line , _$[$0-6].first_column);
    
break;
case 19:

        this.$ = new Declaration( $$[$0-3] , $$[$0-1] , true, Tipo.NULL, 0, _$[$0-4].first_line , _$[$0-4].first_column);
    
break;
case 20:

        this.$ = new Declaration( $$[$0-1] , null , true, Tipo.NULL, 0,_$[$0-2].first_line , _$[$0-2].first_column);
    
break;
case 21:
 
        this.$ = new Declaration( $$[$0-6] , $$[$0-1] , false, $$[$0-4], $$[$0-3], _$[$0-7].first_line , _$[$0-7].first_column);
    
break;
case 22:
 
        this.$ = new Declaration( $$[$0-5] , $$[$0-1] , false, $$[$0-3],0, _$[$0-6].first_line , _$[$0-6].first_column);
    
break;
case 23:
 
        this.$ = new Declaration( $$[$0-3] , $$[$0-1] , false, Tipo.NULL,0, _$[$0-4].first_line , _$[$0-4].first_column);
    
break;
case 24:

        var cantidad = eval('$$[$0-2]');
        this.$ = parseInt( cantidad++);
    
break;
case 25:

        this.$ = 1;
    
break;
case 26:

        this.$ = Tipo.NUMBER;
    
break;
case 27: case 30:

        this.$ = Tipo.STRING;
    
break;
case 28:

        this.$ = Tipo.BOOLEAN;
    
break;
case 29:

        this.$ = Tipo.VOID;
    
break;
case 31:

        this.$ = new Asignacion( $$[$0-3] , $$[$0-1] , _$[$0-3].first_line , _$[$0-3].first_column);
    
break;
case 32:
   this.$ = new Console($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 33:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 34: case 35: case 43: case 65:

        this.$ = $$[$0];
    
break;
case 36: case 44: case 46:

        this.$ = null;
    
break;
case 37:

        this.$ = new While( $$[$0-2] , $$[$0], _$[$0-4].first_line, _$[$0-4].first_column );
    
break;
case 38:

        this.$ = new DoWhile( $$[$0-1] , $$[$0-4], _$[$0-5].first_line , _$[$0-5].first_column);
    
break;
case 39:

        this.$ = new Switch( $$[$0-5] , $$[$0-2] , $$[$0-1], _$[$0-7].first_line , _$[$0-7].first_column);
    
break;
case 42:

        this.$ = new Case( $$[$0-2] , $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 45:

        this.$ = new BloqueInstrucciones($$[$0-1], _$[$0-2].first_line , _$[$0-2].first_column);
    
break;
case 47:

        this.$ = new Funcion($$[$0-6] , $$[$0],  $$[$0-4], $$[$0-1], _$[$0-7].first_line , _$[$0-7].first_column);
    
break;
case 48:

        this.$ = new Funcion($$[$0-4] , $$[$0],  $$[$0-2], Tipo.NULL, _$[$0-5].first_line , _$[$0-5].first_column);
    
break;
case 49: case 76:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 51:

        this.$ = new Parametro($$[$0-2] , $$[$0] , _$[$0-2].first_line , _$[$0-2].first_column);
    
break;
case 52:

        this.$ = new ExpresionAritmetica($$[$0-2], $$[$0], OperacionesAritmeticas.SUMA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 53:

        this.$ = new ExpresionAritmetica($$[$0-2], $$[$0], OperacionesAritmeticas.RESTA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 54:
 
        this.$ = new ExpresionAritmetica($$[$0-2], $$[$0], OperacionesAritmeticas.MULTIPLICACION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 55:

        this.$ = new ExpresionAritmetica($$[$0-2], $$[$0], OperacionesAritmeticas.DIVISION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 56:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.MENOR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 57:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.MENORIG, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 58:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.MAYOR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 59:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.MAYORIG, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 60:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.IGIG, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 61:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.DIF, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 62:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 63:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 64:

        this.$ = new ExpresionUnaria($$[$0],  OperacionUnaria.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 66:
 
        this.$ = $$[$0-1];
    
break;
case 67: case 68:
 
         this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Tipo.NUMBER);
    
break;
case 69:

         this.$ = new Literal($$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, Tipo.STRING);
    
break;
case 70: case 71:
 
         this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Tipo.BOOLEAN);
    
break;
case 73:
 
         this.$ = new Literal($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column, Tipo.ARRAY);
    
break;
case 74:

         this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 75:

        this.$ = new LlamadaFuncion($$[$0-3] , $$[$0-1], _$[$0-3].first_line , _$[$0-3].first_column);
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:$V3,22:$V4,27:$V5,34:$V6,39:$V7,43:$V8,44:$V9,45:$Va,53:$Vb},{1:[3]},{5:[1,25],6:26,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:$V3,22:$V4,27:$V5,34:$V6,39:$V7,43:$V8,44:$V9,45:$Va,53:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),{17:[1,27]},{17:[1,28]},{15:39,17:[1,30],20:29,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{22:[1,42]},{22:[1,43]},{37:[1,44]},{26:[1,45],37:$Vm},{37:[1,47]},{40:48,46:$Vn},{37:[1,50]},{35:[1,51]},{22:[1,52]},{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,13]),o($Vc,[2,14]),{17:[1,53],57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz},o($Vc,[2,16]),{15:39,20:66,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},o($VA,[2,65]),{15:39,20:67,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},o($VA,[2,67]),o($VA,[2,68]),o($VA,[2,69]),o($VA,[2,70]),o($VA,[2,71]),o($VA,[2,72]),{15:39,20:69,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:68},o($VA,[2,74],{37:$Vm}),{17:[1,72],23:[1,70],26:[1,71]},{23:[1,73],26:[1,74]},{15:39,20:75,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{15:39,20:76,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{15:39,20:69,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:77},{15:39,20:78,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{43:[1,79]},{4:80,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:$V3,22:$V4,27:$V5,34:$V6,39:$V7,43:$V8,44:$V9,45:$Va,49:[1,81],53:$Vb},{15:39,20:82,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{36:[1,83]},{37:[1,84]},o($Vc,[2,15]),{15:39,20:85,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{15:39,20:86,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{15:39,20:87,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{15:39,20:88,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{15:39,20:89,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{15:39,20:90,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{15:39,20:91,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{15:39,20:92,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{15:39,20:93,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{15:39,20:94,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{15:39,20:95,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{15:39,20:96,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},o($VA,[2,64]),{38:[1,97],57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz},{29:[1,98],55:$VB},o($VC,[2,77],{57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz}),{22:$VD,24:100,30:$VE,31:$VF,32:$VG,33:$VH},{15:39,20:106,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},o($Vc,[2,20]),{22:$VD,24:107,30:$VE,31:$VF,32:$VG,33:$VH},{15:39,20:108,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{38:[1,109],57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz},{17:[1,110],57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz},{38:[1,111],55:$VB},{38:[1,112],57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz},{37:[1,113]},{6:26,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:$V3,22:$V4,27:$V5,34:$V6,39:$V7,43:$V8,44:$V9,45:$Va,49:[1,114],53:$Vb},o($VI,[2,46]),{38:[1,115],57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz},{37:[1,116]},{22:$VJ,54:117,56:118},o($VK,[2,52],{59:$Vq,60:$Vr}),o($VK,[2,53],{59:$Vq,60:$Vr}),o($VA,[2,54]),o($VA,[2,55]),o($VL,[2,56],{57:$Vo,58:$Vp,59:$Vq,60:$Vr}),o($VL,[2,57],{57:$Vo,58:$Vp,59:$Vq,60:$Vr}),o($VL,[2,58],{57:$Vo,58:$Vp,59:$Vq,60:$Vr}),o($VL,[2,59],{57:$Vo,58:$Vp,59:$Vq,60:$Vr}),o($VM,[2,60],{57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv}),o($VM,[2,61],{57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv}),o([17,23,29,38,55,67,68],[2,62],{57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o([17,23,29,38,55,68],[2,63],{57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy}),o($VA,[2,66]),o($VA,[2,73]),{15:39,20:120,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{25:121,26:[1,122],28:$VN},o($VO,[2,26]),o($VO,[2,27]),o($VO,[2,28]),o($VO,[2,29]),o($VO,[2,30]),{17:[1,124],57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz},{25:125,26:[1,126],28:$VN},{17:[1,127],57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz},{40:128,46:$Vn},o($Vc,[2,31]),o([5,16,17,18,19,21,22,23,27,29,34,38,39,43,44,45,49,51,52,53,55,57,58,59,60,61,62,63,64,65,66,67,68],[2,75]),{40:129,46:$Vn},{15:39,20:130,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},o($VI,[2,45]),{46:[1,131]},{15:39,20:132,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{38:[1,133],55:[1,134]},o($VP,[2,50]),{23:[1,135]},o($VC,[2,76],{57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz}),{26:[1,136],28:$VQ},{15:39,20:138,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{29:[1,139]},o($Vc,[2,19]),{26:[1,140],28:$VQ},{15:39,20:141,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},o($Vc,[2,23]),o($Vc,[2,36],{41:142,42:[1,143]}),o($Vc,[2,37]),{38:[1,144],57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz},{47:145,50:146,51:$VR},{38:[1,148],57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz},{23:[1,149],40:150,46:$Vn},{22:$VJ,56:151},{22:$VD,24:152,30:$VE,31:$VF,32:$VG,33:$VH},{15:39,20:153,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{29:[1,154]},{17:[1,155],57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz},o($VS,[2,25]),{15:39,20:156,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{17:[1,157],57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz},o($Vc,[2,33]),{8:158,39:$V7,40:159,46:$Vn},o($Vc,[2,38]),{48:160,49:[2,44],50:161,51:$VR,52:[1,162]},o($VT,[2,41]),{15:39,20:163,22:$Vd,28:$Ve,37:$Vf,69:$Vg,70:32,71:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl},{17:[1,164]},{22:$VD,24:165,30:$VE,31:$VF,32:$VG,33:$VH},o($Vc,[2,48]),o($VP,[2,49]),o($VP,[2,51]),{17:[1,166],57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz},o($VS,[2,24]),o($Vc,[2,18]),{17:[1,167],57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz},o($Vc,[2,22]),o($Vc,[2,34]),o($Vc,[2,35]),{49:[1,168]},o($VT,[2,40]),{23:[1,169]},{23:[1,170],57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz},o($Vc,[2,32]),{40:171,46:$Vn},o($Vc,[2,17]),o($Vc,[2,21]),o($Vc,[2,39]),{4:172,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:$V3,22:$V4,27:$V5,34:$V6,39:$V7,43:$V8,44:$V9,45:$Va,53:$Vb},{4:173,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:$V3,22:$V4,27:$V5,34:$V6,39:$V7,43:$V8,44:$V9,45:$Va,53:$Vb},o($Vc,[2,47]),{6:26,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:$V3,22:$V4,27:$V5,34:$V6,39:$V7,43:$V8,44:$V9,45:$Va,49:[2,43],53:$Vb},o($VT,[2,42],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,6:26,16:$V0,18:$V1,19:$V2,21:$V3,22:$V4,27:$V5,34:$V6,39:$V7,43:$V8,44:$V9,45:$Va,53:$Vb})],
defaultActions: {25:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Tipo } = require('../Abstract/Retorno');
    const {ExpresionAritmetica, OperacionesAritmeticas} = require('../Expression/ExpresionAritmetica');
    const { Access } = require('../Expression/Access');
    const { Literal } = require('../Expression/Literal');
    const { Declaration } = require('../Instruction/Declaracion');
    const { If } = require('../Instruction/If');     
    const { While } = require('../Instruction/While');
    const { DoWhile } = require('../Instruction/DoWhile');
    const { Asignacion } = require('../Instruction/Asignacion');    
    const { Console } = require('../Instruction/Console');
    const { Switch } = require('../Instruction/Switch');
    const { LlamadaFuncion } = require('../Instruction/LlamadaFuncion');
    const { BloqueInstrucciones } = require('../Instruction/BloqueInstrucciones');    
    const { Case } = require('../Instruction/Case');    
    const { ExpresionLogica , OperacionLogica } = require('../Expression/ExpresionLogica');
    const { ExpresionUnaria , OperacionUnaria } = require('../Expression/OperacionUnaria');
    const { Funcion } = require('../Instruction/Funcion');
    const { Break } = require('../Instruction/Break');
    const { Continue } = require('../Instruction/Continue');
    const { Return } = require('../Instruction/Return');
    const { Parametro } = require('../Instruction/Parametro');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 72
break;
case 2:return 71
break;
case 3:return 73
break;
case 4:return 59
break;
case 5:return 60
break;
case 6:return 58
break;
case 7:return 57
break;
case 8:return '++'
break;
case 9:return '--'
break;
case 10:return '^'
break;
case 11:return '%'
break;
case 12:return 62
break;
case 13:return 64
break;
case 14:return 61
break;
case 15:return 63
break;
case 16:return 65
break;
case 17:return 66
break;
case 18:return 26
break;
case 19:return 68
break;
case 20:return 67
break;
case 21:return 69
break;
case 22:return 37
break;
case 23:return 38 
break;
case 24:return 46
break;
case 25:return 49
break;
case 26:return 17
break;
case 27:return 23
break;
case 28:return 28
break;
case 29:return 29
break;
case 30:return 55
break;
case 31:return 35
break;
case 32:return '`'
break;
case 33:return '$'
break;
case 34:return '?'
break;
case 35:return '"'
break;
case 36:return '\''
break;
case 37:return '//'
break;
case 38:return '/*'
break;
case 39:return '*/'
break;
case 40:return 39
break;
case 41:return 42
break;
case 42:return 45
break;
case 43:return 51
break;
case 44:return 52
break;
case 45:return 43
break;
case 46:return 44
break;
case 47:return 'FOR'
break;
case 48:return 'IN'
break;
case 49:return 'OF'
break;
case 50:return 74
break;
case 51:return 75
break;
case 52:return 19
break;
case 53:return 16
break;
case 54:return 18
break;
case 55:return 53
break;
case 56:return 21
break;
case 57:return 27
break;
case 58:return 34
break;
case 59:return 36
break;
case 60:return 'GRAFICAR'
break;
case 61:return 'PUSH'
break;
case 62:return 'POP'
break;
case 63:return 'LENGTH'
break;
case 64:return 33
break;
case 65:return 30
break;
case 66:return 31
break;
case 67:return 32
break;
case 68:return 'TYPE'
break;
case 69:return 22;
break;
case 70:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:([0-9]+))/,/^(?:(([0-9]+)\.([0-9]+)))/,/^(?:(("[^"]*")))/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?:`)/,/^(?:\$)/,/^(?:\?)/,/^(?:")/,/^(?:\\')/,/^(?:\\\/\\\/)/,/^(?:\\\/\\\*)/,/^(?:\*\/)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:function\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:Length\b)/,/^(?:void\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:type\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}